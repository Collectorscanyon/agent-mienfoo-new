// Directory structure
.
├── server
│   ├── index.ts           // Main server entry point
│   ├── config
│   │   └── environment.ts // Environment configuration
│   ├── api
│   │   ├── routes.ts      // API routes
│   │   └── middleware.ts  // API middleware
│   ├── bot
│   │   ├── handlers.ts    // Bot logic handlers
│   │   └── openai.ts      // OpenAI integration
│   └── utils
│       ├── logger.ts      // Logging utility
│       └── neynar.ts      // Neynar client setup

// server/index.ts
import express from 'express';
import cors from 'cors';
import { configureRoutes } from './api/routes';
import { setupMiddleware } from './api/middleware';
import { logger } from './utils/logger';

const app = express();
const port = process.env.PORT || 5000;

// Middleware setup
app.use(cors());
app.use(express.json());
setupMiddleware(app);

// Configure routes
configureRoutes(app);

// Start server
app.listen(port, () => {
  logger.info('Server started successfully:', {
    timestamp: new Date().toISOString(),
    port,
    environment: process.env.NODE_ENV,
    config: {
      username: process.env.BOT_USERNAME,
      fid: process.env.BOT_FID,
      hasNeynarKey: Boolean(process.env.NEYNAR_API_KEY),
      hasSignerUuid: Boolean(process.env.SIGNER_UUID),
      hasOpenAIKey: Boolean(process.env.OPENAI_API_KEY),
      hasWebhookSecret: Boolean(process.env.WEBHOOK_SECRET)
    }
  });
});

// server/api/routes.ts
import { Router } from 'express';
import { validateWebhook } from './middleware';
import { handleWebhook } from '../bot/handlers';

export function configureRoutes(app: express.Application) {
  const router = Router();

  // Register webhook routes
  logger.info('Registering webhook routes...');
  router.post('/webhook', validateWebhook, handleWebhook);
  
  // Mount routes
  app.use('/api', router);
  
  logger.info('Webhook route registered at /api/webhook', {
    timestamp: new Date().toISOString(),
    environment: process.env.NODE_ENV
  });
}

// server/api/middleware.ts
import { Request, Response, NextFunction } from 'express';
import crypto from 'crypto';
import { logger } from '../utils/logger';

export function validateWebhook(req: Request, res: Response, next: NextFunction) {
  const requestId = crypto.randomBytes(4).toString('hex');
  
  logger.info('Incoming request:', {
    requestId,
    timestamp: new Date().toISOString(),
    method: req.method,
    path: req.path,
    query: req.query,
    headers: {
      'content-type': req.headers['content-type'],
      'x-neynar-signature': req.headers['x-neynar-signature'] ? 'present' : 'missing',
      'user-agent': req.headers['user-agent']
    }
  });

  // Attach requestId to request
  (req as any).requestId = requestId;
  next();
}

// server/bot/handlers.ts
import { Request, Response } from 'express';
import { logger } from '../utils/logger';
import { neynarClient } from '../utils/neynar';
import { generateResponse } from './openai';

export async function handleWebhook(req: Request, res: Response) {
  const requestId = (req as any).requestId;
  
  try {
    const { type, data } = req.body;
    
    logger.info('Processing webhook:', {
      requestId,
      type,
      data
    });

    if (type === 'cast.created' && data.text.toLowerCase().includes('@mienfoo.eth')) {
      const response = await generateResponse(data.text);
      await neynarClient.publishCast(process.env.SIGNER_UUID!, response, {
        replyTo: data.hash
      });
      
      logger.info('Response posted:', {
        requestId,
        response,
        parentHash: data.hash
      });
    }

    res.status(200).json({ status: 'success' });
  } catch (error) {
    logger.error('Error processing webhook:', {
      requestId,
      error: error instanceof Error ? error.message : 'Unknown error'
    });
    res.status(500).json({ error: 'Internal server error' });
  }
}