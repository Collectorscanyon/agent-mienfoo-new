import express from 'express';
import { NeynarAPIClient } from '@neynar/nodejs-sdk';
import OpenAI from 'openai';
import crypto from 'crypto';

const app = express();
const port = process.env.PORT || 5000;

// Initialize clients
const neynar = new NeynarAPIClient(process.env.NEYNAR_API_KEY!);
const openai = new OpenAI({ apiKey: process.env.OPENAI_API_KEY });

// Track processed mentions
const processedMentions = new Set<string>();

// Middleware
app.use(express.json({
  verify: (req: any, res, buf) => {
    req.rawBody = buf;
  }
}));

// Verify Neynar webhook signature
function verifySignature(signature: string | undefined, body: Buffer): boolean {
  if (!signature || !process.env.WEBHOOK_SECRET) return false;
  const hmac = crypto.createHmac('sha256', process.env.WEBHOOK_SECRET);
  const digest = `sha256=${hmac.update(body).digest('hex')}`;
  return crypto.timingSafeEqual(Buffer.from(signature), Buffer.from(digest));
}

// Webhook handler
app.post('/api/webhook', async (req: express.Request, res: express.Response) => {
  const requestId = crypto.randomBytes(4).toString('hex');
  
  try {
    console.log('Webhook received:', {
      requestId,
      timestamp: new Date().toISOString(),
      signature: req.headers['x-neynar-signature'] ? 'present' : 'missing'
    });

    // Verify signature
    const signature = req.headers['x-neynar-signature'] as string;
    if (!verifySignature(signature, req.rawBody)) {
      console.error('Invalid signature:', { requestId });
      return res.status(401).json({ error: 'Invalid signature' });
    }

    // Process webhook
    const { type, data } = req.body;
    
    if (type !== 'cast.created') {
      return res.status(200).json({ status: 'ignored', reason: 'not a cast event' });
    }

    const { hash, text, author, mentioned_profiles } = data;

    // Check if this mention was already processed
    if (processedMentions.has(hash)) {
      console.log('Skipping duplicate mention:', { requestId, hash });
      return res.status(200).json({ status: 'ignored', reason: 'already processed' });
    }

    // Check if bot is mentioned
    const isBotMentioned = mentioned_profiles?.some(
      (profile: any) => profile.username === 'mienfoo.eth'
    );

    if (!isBotMentioned) {
      return res.status(200).json({ status: 'ignored', reason: 'bot not mentioned' });
    }

    console.log('Generating response:', {
      requestId,
      author: author.username,
      text
    });

    // Generate response
    const completion = await openai.chat.completions.create({
      model: "gpt-4-turbo-preview",
      messages: [
        {
          role: "system",
          content: `You are Mienfoo, a knowledgeable Pokémon card collector bot. 
Your responses should be concise (max 280 chars), friendly, and focus on collecting advice and Pokémon card knowledge. 
Always end your responses with /collectorscanyon`
        },
        { role: "user", content: text }
      ],
      max_tokens: 100,
      temperature: 0.7
    });

    let response = completion.choices[0].message.content;
    if (!response?.endsWith('/collectorscanyon')) {
      response = `${response} /collectorscanyon`;
    }

    console.log('Posting response:', {
      requestId,
      response,
      parentHash: hash
    });

    // Post response
    await neynar.publishCast(
      process.env.SIGNER_UUID!,
      response,
      { replyTo: hash }
    );

    // Mark as processed
    processedMentions.add(hash);

    console.log('Response posted successfully:', {
      requestId,
      hash
    });

    res.status(200).json({ status: 'success' });
  } catch (error) {
    console.error('Error processing webhook:', {
      requestId,
      error: error instanceof Error ? error.message : 'Unknown error'
    });
    res.status(500).json({ error: 'Internal server error' });
  }
});

// Start server
app.listen(port, () => {
  console.log('Server started successfully:', {
    timestamp: new Date().toISOString(),
    port,
    environment: process.env.NODE_ENV,
    config: {
      username: '834885',
      fid: '834885',
      hasNeynarKey: Boolean(process.env.NEYNAR_API_KEY),
      hasSignerUuid: Boolean(process.env.SIGNER_UUID),
      hasOpenAIKey: Boolean(process.env.OPENAI_API_KEY),
      hasWebhookSecret: Boolean(process.env.WEBHOOK_SECRET)
    }
  });
});

export default app;