Transform this project into a Vercel-compatible structure. The project has:

A front-end built with Vite, located in client.
A back-end built with Express and TypeScript, located in server.
Hereâ€™s what I need:

Update the package.json scripts for:
build:frontend (Vite front-end build).
build:backend (Back-end build using esbuild or TypeScript compiler).
build (a combined build command for both).
Add a vercel.json file that:
Serves the front-end from client/dist.
Routes API calls to a serverless function in api/index.ts.
Ensure environment variables (NEYNAR_API_KEY, OPENAI_API_KEY, etc.) are correctly handled for both local development and Vercel.
Migrate the server/index.ts file to api/index.ts and ensure compatibility with Vercel serverless functions.
Output the updated file structure, configurations, and any additional instructions.

Expected Replit Output
The following tasks will be performed:

1. Updated File Structure
client/: Front-end files.
client/dist/: Vite build output for deployment.
api/index.ts: Back-end file (migrated from server/index.ts).
2. Updated package.json
json
Copy code
{
  "scripts": {
    "dev": "tsx server/index.ts",
    "build:frontend": "vite build --outDir=client/dist",
    "build:backend": "esbuild server/index.ts --platform=node --packages=external --bundle --format=esm --outdir=api",
    "build": "npm run build:frontend && npm run build:backend",
    "start": "NODE_ENV=production node api/index.js"
  }
}
3. New vercel.json
json
Copy code
{
  "version": 2,
  "builds": [
    { "src": "client/dist/**", "use": "@vercel/static" },
    { "src": "api/index.ts", "use": "@vercel/node" }
  ],
  "routes": [
    { "src": "/api/(.*)", "dest": "/api/index.ts" },
    { "src": "/(.*)", "dest": "/client/dist/$1" }
  ]
}
4. Serverless Back-End Adjustments
Move server/index.ts to api/index.ts and ensure it uses Vercel's serverless syntax:

typescript
Copy code
export default async function handler(req, res) {
  if (req.method === "GET") {
    res.status(200).json({ message: "Serverless API is working!" });
  } else {
    res.status(405).json({ error: "Method not allowed" });
  }
}
5. Local Development Instructions
Add .env for local development.
In Vercel, migrate .env variables to the Environment Variables section.
6. Vite Configuration
Ensure vite.config.js points to the correct dist folder:

javascript
Copy code
export default defineConfig({
  build: {
    outDir: "client/dist"
  }
});
Next Steps
Copy the generated output (file structure, package.json, vercel.json, etc.) from Replit.
Push changes to GitHub.
Deploy to Vercel following the new structure.
This prompt and process ensure seamless transformation of your Replit project into a Vercel-compatible application. Let me know if you'd like help crafting the actual Replit script or debugging any issues!