import express from 'express';
import { Router } from 'express';
import crypto from 'crypto';

const router = Router();

// Enhanced request logging middleware
const logRequest = (req: express.Request, res: express.Response, next: express.NextFunction) => {
  const requestId = crypto.randomBytes(4).toString('hex');
  console.log('Incoming request:', {
    requestId,
    timestamp: new Date().toISOString(),
    method: req.method,
    path: req.path,
    query: req.query,
    headers: {
      'content-type': req.headers['content-type'],
      'x-neynar-signature': req.headers['x-neynar-signature'] ? 'present' : 'missing',
      'user-agent': req.headers['user-agent']
    },
    body: req.method === 'POST' ? JSON.stringify(req.body) : 'not a POST request'
  });
  
  // Attach requestId to the request object for tracking
  (req as any).requestId = requestId;
  next();
};

// Webhook signature verification
const verifySignature = (req: express.Request, res: express.Response, next: express.NextFunction) => {
  const signature = req.headers['x-neynar-signature'];
  const webhookSecret = process.env.WEBHOOK_SECRET;

  if (!signature) {
    console.error('Missing Neynar signature', { requestId: (req as any).requestId });
    return res.status(401).json({ error: 'Missing signature' });
  }

  if (!webhookSecret) {
    console.error('Missing webhook secret in environment', { requestId: (req as any).requestId });
    return res.status(500).json({ error: 'Server configuration error' });
  }

  try {
    const hmac = crypto.createHmac('sha256', webhookSecret);
    const computedSignature = hmac
      .update(JSON.stringify(req.body))
      .digest('hex');

    if (signature !== computedSignature) {
      console.error('Invalid signature', { 
        requestId: (req as any).requestId,
        expected: computedSignature.slice(0, 10) + '...',
        received: (signature as string).slice(0, 10) + '...'
      });
      return res.status(401).json({ error: 'Invalid signature' });
    }

    next();
  } catch (error) {
    console.error('Error verifying signature', { 
      requestId: (req as any).requestId,
      error: error instanceof Error ? error.message : 'Unknown error'
    });
    return res.status(500).json({ error: 'Signature verification failed' });
  }
};

// Enhanced webhook handler
router.post('/webhook', express.json(), logRequest, verifySignature, async (req: express.Request, res: express.Response) => {
  const requestId = (req as any).requestId;
  
  try {
    console.log('Processing webhook:', {
      requestId,
      timestamp: new Date().toISOString(),
      type: req.body.type,
      data: JSON.stringify(req.body.data)
    });

    // Handle different Farcaster event types
    switch (req.body.type) {
      case 'cast.created':
        const cast = req.body.data;
        // Check if the cast mentions our bot
        if (cast.text.toLowerCase().includes('@mienfoo.eth')) {
          console.log('Bot mentioned:', {
            requestId,
            author: cast.author.username,
            text: cast.text
          });
          
          // TODO: Process the mention and generate response
        }
        break;
        
      default:
        console.log('Unhandled event type:', {
          requestId,
          type: req.body.type
        });
    }

    res.status(200).json({ status: 'success' });
  } catch (error) {
    console.error('Error processing webhook:', {
      requestId,
      error: error instanceof Error ? error.message : 'Unknown error',
      stack: error instanceof Error ? error.stack : undefined
    });
    res.status(500).json({ error: 'Internal server error' });
  }
});

export default router;